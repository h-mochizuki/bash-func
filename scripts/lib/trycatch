#!/bin/bash
# =====================================
#               例外定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
source "${base}/log"

# ----------------
#     初期設定
# ----------------
# ※ 上書きしたい場合は、このファイルを読み込んだ後で実施してください
# タイムアウト例外
export TimeoutException=124

# ----------------
#     関数定義
# ----------------
trycatch.example() {
  cat <<EOF
#!/bin/bash
# ===================
# Try Catch Excample.
# ===================
source ${base}/trycatch

# define exceptons
export AnException=100

# start with a try
try
( # open a subshell !!!
  echo "do something"
  [ someErrorCondition ] && throw \$AnException "This is Test"

  echo "finished"
)
# directly after closing the subshell you need to connect a group to the catch using ||
catch || {
  case \$EXCEPTION_CD in
    \$AnException)
      echo "\$EXCEPTION_CD : AnException was thrown"
    ;;
    *)
      echo "\$EXCEPTION_CD : An unexpected exception was thrown"
      throw \$exitCd
    ;;
  esac
}
EOF
}

try() {
  # catch句にエラーを届けるための前処理を実施します
  # 後続処理では次のように処理を始めてください
  # try
  # (
  #   echo "do something"
  # )
  )
  [[ $- = *e* ]]; SAVED_OPT_E=$?
  set +e
}

catch() {
  # エラーが発生したかを後続に返します
  # エラーコードは EXCEPTION_CD として取得できます
  # 後続処理では次のように処理を始めてください
  #   catch || { sub-shells }
  export EXCEPTION_CD=$?
  (( $SAVED_OPT_E )) && set +e
  return "${EXCEPTION_CD}"
}

throw() {
  # エラーログ出力後に指定された終了コードで処理を終了します
  # param1: 終了コード
  # param2+: エラーログ内容
  local exitCd="${1}";shift
  if [[ ! -z "${exitCd+x}" ]] && [[ "${exitCd}" -ne 0 ]];then
    if [[ $# -ne 0 ]];then
      log.error "$@"
    fi
    exit "${exitCd}"
  fi
}

throwErrors() {
  # 以降の処理でエラー時に終了するようにします
  set -e
}

ignoreErrors() {
  # 以降の処理でエラー時にも処理を継続するようにします
  set +e
}
