#!/bin/bash
# =====================================
#           ファイル操作関数定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"

# ----------------
#     関数定義
# ----------------
file.executable() {
  # 指定されたファイルが実行可能かを返します
  # param1 ファイルパス
  # returnCd 0:実行可能 1:実行不可
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -x "${1}" ]]
}

file.writable() {
  # 指定されたファイルが書込可能かを返します
  # param1 ファイルパス
  # returnCd 0:書込可能 1:書込不可
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -w "${1}" ]]
}

file.readable() {
  # 指定されたファイルが読込可能かを返します
  # param1 ファイルパス
  # returnCd 0:読込可能 1:読込不可
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -r "${1}" ]]
}

file.isFile() {
  # 指定されたパスがファイルかを返します
  # param1 ファイルパス
  # returnCd 0:ファイル 1:ファイルではない
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -f "${1}" ]]
}

file.isDirectory() {
  # 指定されたパスがディレクトリかを返します
  # param1 ファイルパス
  # returnCd 0:ディレクトリ 1:ディレクトリではない
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -d "${1}" ]]
}

file.isLink() {
  # 指定されたパスがシンボリックリンクかを返します
  # param1 ファイルパス
  # returnCd 0:シンボリックリンク 1:シンボリックリンクではない
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -L "${1}" ]]
}

file.exists() {
  # 指定されたパスが存在するかを返します
  # param1 ファイルパス
  # returnCd 0:存在する 1:存在しない
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -e "${1}" ]]
}

file.isNotEmpty() {
  # 指定されたパスのファイルが0バイト以上かを返します
  # param1 ファイルパス
  # returnCd 0:空ファイルではない 1:存在しないもしくは空ファイル
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -s "${1}" ]]
}

dir.isNotEmpty() {
  # 指定されたパスのディレクトリが空ではないかを返します
  # param1 ディレクトリパス
  # returnCd 0:空ディレクトリではない 1:存在しないもしくは空ディレクトリ
  [[ "$#" -ne 0 ]] && [[ ! -z "${1+x}" ]] && [[ -d "${1}" ]] && [[ ! -z "$(ls -A "${1}")" ]]
}

file.absolutePath() {
  # 指定されたファイルの絶対パスを返します
  # param1+ ファイルパス
  # return 絶対パス
  local p
  local arr
  arr=()
  for p in "$@";do
    p=$(readlink -e "${p}")
    p="$(cd $(dirname ${p});pwd)/$(basename ${p})"
    arr+=( "${p}" )
  done
  echo "${arr[@]}"
}

file.size() {
  # 指定されたファイルのバイトサイズを返します
  # param1 ファイルパス
  # return ファイルサイズ
  # returnCd 0:正常 1:ファイルが存在しない
  local p
  for p in "$@";do
    if [[ ! -z "${1+p}" ]];then
      if [[ -d "$p" ]];then
        echo -e "$(du -b --max-depth=0 $(cd ${p};pwd))/"
      elif [[ -e "$p" ]];then
        echo -e "$(stat -c %s ${p})\t$(cd $(dirname ${p});pwd)/$(basename ${p})"
      fi
    fi
  done
}

file.stream() {
  # 指定されたファイルもしくは入力ストリームをストリームとして返します
  # input-stream 入力ストリーム
  # param1+ ファイルパス
  # return ストリーム
  if [ -t 0 ]; then
    [[ "$#" -ne 0 ]] && cat "$@"
  else
    cat -
  fi
}

file.isBelongedTo() {
  # ディレクトリを遡り、対象ファイルがあるかを返します
  # param1 検索対象ファイル
  # return 対象ファイルパス
  # returnCd 0:ファイルがあった 1: ファイルがなかった
  [[ "$#" -eq 0 ]] && return 1
  local target="${1}"
  local cur="$(pwd)"
  while [[ ! "${cur}" = "/" ]];do
    [[ -e "${cur}/${target}" ]] && {
      echo "${cur}/${target}"
      return 0
    }
    cur="$(dirname ${cur})"
  done
  return 1
}

file.isSame() {
  # 2つのファイルもしくはディレクトリが同じものかを比較します
  # param1 比較対象ファイル1
  # param2 比較対象ファイル2
  # returnCd 0:一致した それ以外: 一致しなかった
  [[ ! "$#" -eq 2 ]] && return 1
  file.isDirectory "${1}"
  if [[ "$?" -eq 0 ]];then
    file.isFile "${2}" && echo "'${2}' is not directroy" && return 2
    local tmpfile=$(mktemp)
    rm_tmpfile() {
      [[ -f "${tmpfile}" ]] && rm -f "${tmpfile}"
    }
    trap rm_tmpfile EXIT RETURN
    trap 'trap - EXIT RETURN; rm_tmpfile; exit -1' INT PIPE TERM
    (
      cd "${1}"
      find . -type f -exec md5sum {} \; > "${tmpfile}"
    )
    (
      cd "${2}"
      md5sum --quiet -c "${tmpfile}" >/dev/null
    )
  else
    file.isDirectory "${2}" && echo "'${2}' is directory" && return 2
    cmp -s "${1}" "${2}" 2>/dev/null
  fi
}

file.eval() {
  # ファイルに含まれる環境変数やスクリプトを評価した文字列を返します
  # input-stream 入力ストリーム
  # param1 ファイルパス
  # return 環境変数やスクリプトを評価した文字列
  if [ -t 0 ]; then
    [[ "$#" -ne 0 ]] && cat "$1"
  else
    cat -
  fi | eval "echo -e \"$(cat)\""
}

file.eachLine() {
  # ファイル内容を一行ずつ出力します
  # param1 ファイルパス
  # return 一行ずつのファイル内容
  for line in "$(cat $@)";do
    echo "$line"
  done
}

dir.tree() (
  # ディレクトリ階層構造を表示します
  # param1 ファイルパス
  # return ディレクトリ階層構造
  cd ${1:-.} >/dev/null 2>&1 && {
    pwd
    find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|- \1/;s/\/[^/|]*/|  /g'
  } || {
    echo "file.tree: ${1:-}: No such directory"
    exit 1
  }
)
