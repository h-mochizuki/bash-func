#!/bin/bash
# =====================================
#              評価関数定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
source "${base}/log"
source "${base}/file"

# ----------------
#     関数定義
# ----------------
assert.isRoot() {
  # root権限を持つかを返します
  # param1? ユーザ名
  # returnCd 0:root権限を持つ 1:root権限を持たない
  [ "$(id -u ${1:-$(whoami)})" == "0" ]
}

assert.isWindows() {
  # Windows環境で実行されているかを返します
  # returnCd 0:Windows環境で実行されている 1:Windows以外で実行されている
  case "$(uname -s)" in
    CYGWIN*|MINGW*|MSYS*|Microsoft*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

assert.installed() {
  # 指定されたコマンドが実行可能かを返します
  # param1 コマンドやファンクション
  # returnCd 0:実行可能 1:実行不可
  [[ "$#" -eq 0 ]] && return 1
  case "$(type -t ${1})" in
    builtin|function)
      return 0
      ;;
    file|alias)
      file.executable $(type -P "${1}")
      ;;
    *)
      return 1
      ;;
  esac
}

assert.exec() {
  # 渡されたコマンドを実行して、エラーだった場合には全体の処理を終了します
  # param1+ 実行コマンド
  # exitCd 1:処理エラー
  if [ "$#" -gt 0 ];then
    local cmd="$1";shift
    local args=( "$@" )
    "$cmd" "${args[@]}" || if [ true ]; then
      log.logger 'ERROR' "!!FAILED!! -exec-> $cmd ${args[@]//\"/}"
      exit 1
    fi
  fi
}

__assert.__lock() {
  # ロックファイルを作成します
  # 既にファイルがある場合は、指定時間だけ待機します
  # param1 タイムアウト時間
  # param2 ロックファイル
  # returnCd 0:正常 124:タイムアウトエラー
  local startTime=$(date +'%s')
  local currentTime
  local timeout="${1:?'timeout is reuqired.'}";shift
  local lockfile="${1:?'lockfile is reuqired.'}";shift

  while true;do
    ( umask 0777; : > "${lockfile}" ) 2> /dev/null
    if [[ $? -eq 0 ]];then
      return 0
    fi
    currentTime=$(date +'%s')
    if [[ $((currentTime - startTime)) -gt ${timeout} ]];then
      log.logger 'ERROR' "lock timeout : {}s" "${timeout}"
      return 124
    fi
  done
}

assert.unlock() {
  # ロックファイルを削除します
  # param1 ロックファイル
  local exitCd=$?
  rm -f "${1:?'lockfile is required.'}"
  exit "${exitCd}"
}

assert.lock() {
  # ロックファイルを作成します
  # 既にファイルがある場合は、指定時間だけ待機します
  # opt: w タイムアウト秒数（デフォルト：10秒）
  # param1 ロックファイル（デフォルト：呼び出し元Bashソースファイル）
  # returnCd 0:正常 124:タイムアウトエラー
  # ----
  # サブシェルから抜けることで自動ロック解除を行います。
  # こんな感じで使ってください。
  # (
  #   assert.lock 'lockme.lock'
  #   # 何かの処理
  # )
  local OPTIND
  local timeout
  local lockfile
  while getopts w: OPT
  do
    case $OPT in
      w) timeout=$OPTARG
      ;;
    esac
  done
  shift $((OPTIND - 1))
  lockfile="${1:-$(basename ${BASH_SOURCE[1]:-main}).lock}"

  __assert.__lock "${timeout:-10}" "${lockfile}" || exit
  trap "assert.unlock '${lockfile}'" EXIT HUP INT QUIT TERM
}
