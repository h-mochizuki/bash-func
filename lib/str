#!/bin/bash
# =====================================
#            文字列関数定義
# =====================================

# ----------------
#     関数定義
# ----------------
str.indexOf() {
  # 検索対象文字列が入力文字列（もしくはストリーミング）の何文字目にあたるかを返します
  # input-stream 入力ストリーム
  # param1 検索対象文字列
  # param2 入力文字列
  # return 検索対象文字列が何文字目にあたるか
  # returnCd 0:文字列が見つかった 1:文字列が見つからなかった
  local idx
  if [ -t 0 ]; then
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    local line=''
    if [ "$#" -gt 0 ];then
      line="${1}"
    fi
    idx=$(awk 'BEGIN{ print index("'"${line}"'", "'"${target}"'")-1}')
  else
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    idx=$(cat - | awk '{ print index($0, "'"${target}"'")-1}')
  fi
  echo "$idx"
  [[ ! "$idx" == "-1" ]]
}

str.contains() {
  # 検索対象文字列が入力文字列（もしくはストリーミング）に含まれるかを返します
  # input-stream 入力ストリーム
  # param1 検索対象文字列
  # param2 入力文字列
  # returnCd 0:文字列が含まれている 1:文字列が含まれていない
  local index
  if [ -t 0 ]; then
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    local line=''
    if [ "$#" -gt 0 ];then
      line="${1}"
    fi
    index=$(awk 'BEGIN{ print index("'"${line}"'", "'"${target}"'")}')
  else
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    index=$(cat - | awk '{ print index($0, "'"${target}"'")}')
  fi
  [[ ! "$index" == "0" ]]
}

str.match() {
  # パターンが入力文字列にマッチするかを判定し、判定結果を返します
  # param1 パターン
  # param2 入力文字列
  # return マッチした文字列を格納した配列
  # returnCd 0:文字列が含まれている 1:文字列が含まれていない
  if [[ "$#" -ge 2 ]];then
    local regex="$1";shift
    local line="$1"
    if [[ "$line" =~ $regex ]];then
      echo "${BASH_REMATCH[@]}"
      return 0
    fi
  fi
  return 1
}

str.stream() {
  # 入力引数、もしくは入力ストリームをストリームとして返します
  # input-stream 入力ストリーム
  # param1+ 入力引数
  # return ストリーム
  [[ -t 0 ]] && echo "$@" || cat -
}

str.toLower() {
  # 入力文字列、もしくは入力ストリームを小文字に変換します
  # input-stream 入力ストリーム
  # param1+ 文字列
  # return 小文字に変換した文字列
  str.stream "$@" | tr '[:upper:]' '[:lower:]'
}

str.toUpper() {
  # 入力文字列、もしくは入力ストリームを大文字に変換します
  # input-stream 入力ストリーム
  # param1+ 文字列
  # return 大文字に変換した文字列
  str.stream "$@" | tr '[:lower:]' '[:upper:]'
}

str.toLf() {
  # 改行コードを CRLF -> LF 変換します
  # input-stream 入力ストリーム
  # param1+ 文字列
  # return 改行コードを LF に変換した文字列
  str.stream "$@" | tr -d \\r
}

str.toCrLf() {
  # 改行コードを LF -> CRLF 変換します
  # input-stream 入力ストリーム
  # param1+ 文字列
  # return 改行コードを LF に変換した文字列
  str.stream "$@" | str.toLf | sed 's/$/\r/g'
}

str.charset() {
  # 文字コードを返します
  # param1+ ファイル名
  # return 文字コード
  local p c
  for p in "$@";do
    c=$(file -i "${p}" | sed -e 's/^.*=//' | str.toUpper)
    if [[ "${c}" ==  'UNKNOWN-8BIT' ]];then
      echo -e "SHIFT-JIS\t${p}"
    else
      echo -e "${c}\t${p}"
    fi
  done
}

str.convert() {
  # 文字コード及び改行コードを変更します
  # opt: f 変更元文字コード（デフォルト: str.charset の結果）
  # opt: t 変更後文字コード（デフォルト: UTF-8）
  # opt: l 変更後改行コード（LF | CRLF, デフォルト: LF）
  # param1+ ファイル名
  local OPTIND
  local p
  local from
  local to='UTF-8'
  local lineseparator='LF'
  while getopts f:t:l: OPT
  do
    case $OPT in
      f) from="$(str.toUpper $OPTARG)"
      ;;
      t) to="$(str.toUpper $OPTARG)"
      ;;
      l) lineseparator="$(str.toUpper $OPTARG)"
      ;;
    esac
  done
  shift $((OPTIND - 1))

  for p in "$@";do
    if [ -z "${from+x}" ];then
      from=$(str.charset "${p}" | awk '{ print $1 }')
    fi
    if [ "${lineseparator}" == "LF" ];then
      iconv -f "${from}" -t "${to}" "${p}" | str.toLf
    else
      iconv -f "${from}" -t "${to}" "${p}" | str.toCrLf
    fi
  done
}

str.isInteger() {
  # 入力文字列が整数かどうかを返します
  # param1 入力文字列
  # returnCd 0:整数 1:整数ではない
  [[ "$#" -eq 0 ]] && return 1
  expr "${1}" + 1 >/dev/null 2>&1
  [[ $? -lt 2 ]]
}

str.isNumber() {
  # 小数の場合も考慮し、入力文字列が数値かどうかを返します
  # param1 入力文字列
  # returnCd 0:数値 1:数値ではない
  [[ "$#" -eq 0 ]] && return 1
  str.isInteger "${1/./}"
}

str.times() {
  # 文字列を指定回数繰り返します
  # param1 文字列
  # param2 指定回数（デフォルト1回）
  # return 指定回数繰り返された文字列
  printf "%*s" ${2:-1} | sed -e "s/ /${1:-}/g"
}

str.evalstr() {
  # 入力内容に含まれる環境変数やスクリプトを評価した文字列を返します
  # input-stream 入力ストリーム
  # param1 対象文字列
  # return 環境変数やスクリプトを評価した文字列
  str.stream "$@" | eval "echo -e \"$(cat)\""
}

str.evalfile() {
  # ファイルに含まれる環境変数やスクリプトを評価した文字列を返します
  # input-stream 入力ストリーム
  # param1 ファイルパス
  # return 環境変数やスクリプトを評価した文字列
  if [ -t 0 ]; then
    [[ "$#" -ne 0 ]] && cat "$1"
  else
    cat -
  fi | eval "echo -e \"$(cat)\""
}

str.initial() {
  # 頭文字を返します
  # input-stream 入力ストリーム
  # param1+ 対象文字列
  if [ -t 0 ]; then
    for arg in "$@"; do
      echo "$arg" | sed -e 's/^\(.\).*$/\1/'
    done
  else
    cat - | sed -e 's/^\(.\).*$/\1/'
  fi
}

str.trim() {
  # 前後の空白を除去します
  # input-stream 入力ストリーム
  # param1+ 対象文字列
  if [ -t 0 ]; then
    for arg in "$@"; do
      echo "$arg" | sed -e 's/^\s*//' -e 's/\s*$//'
    done
  else
    cat - | sed -e 's/^\s*//' -e 's/\s*$//'
  fi
}

str.take() {
  # 指定文字数分を切り出します
  # input-stream 入力ストリーム
  # param1 指定文字数（負数で末尾から）
  # param2+ 対象文字列
  str.isInteger "$1" >/dev/null 2>&1
  [[ "$?" -ne 0 ]] && str.stream "$@" && return 1
  local justified="^\(.\{${1#-}\}\).*"
  [[ "${1%%[0-9]*}" == "-" ]] && justified=".*\(.\{${1#-}\}\)$"
  shift
  str.stream "$@" | sed -e "s/${justified}/\1/"
}

str.fill() {
  # 指定文字数まで指定文字で満たします
  # input-stream 入力ストリーム
  # param1 指定文字数（負数で右寄せ）
  # param2 指定文字
  # param3+ 対象文字列
  [[ "$#" -eq 0 ]] && return 1
  str.isInteger "$1" ||  return 1
  local justified="left"
  [[ "${1%%[0-9]*}" == "-" ]] && justified="right"
  local max="${1#-}"; shift
  local pad="${1:- }"; shift
  local full=$( str.times "${pad}" $(( ${max} / ${#pad} + 1 )) )
  [[ "${justified}" == "left" ]] && {
    str.stream "$@" | echo "$(cat)${full}" | str.take ${max}
  } || {
    str.stream "$@" | echo "${full}$(cat)" | str.take -${max}
  }
}

str.base64() {
  # 文字列をbase64エンコード/デコードします
  # input-stream 入力ストリーム
  # opt: d デコード
  # param1+ 対象文字列
  local OPTIND
  local decode=''
  while getopts :d OPT
  do
    case $OPT in
      d) decode='true'
      ;;
    esac
  done
  shift $((OPTIND - 1))

  input-stream() {
    [[ -t 0 ]] && echo -n "$@" || cat -
  }
  [[ "x${decode}" == "x" ]] && {
    input-stream "$@" | base64 | tr '/+' '_-' | tr -d '='
  } || {
    input-stream "$@" | base64 -d 2>/dev/null
  }
}

str.hr() (
  # ターミナルに水平線を引きます
  # param1 横幅
  # return 水平線
  local width=80
  $(tput cols 2>/dev/null 1>/dev/null) && {
    width=$(tput cols);
  }
  str.times "${1--}" "${width}" | str.take ${width}
)

str.bold() {
  # 入力内容の表示を太字にします
  # param1+ 太字にしたい文字列
  # return 太字にした文字列
  echo -e "\033[1m${@}\033[0m"
}
alias str.f.b="str.bold"

str.format.italic() {
  # 入力内容の表示をイタリックにします
  # param1+ イタリックにしたい文字列
  # return イタリックにした文字列
  echo -e "\033[3m${@}\033[0m"
}
alias str.f.i="str.format.italic"

str.format.underline() {
  # 入力内容にアンダーラインを引きます
  # param1+ アンダーラインを追加したい文字列
  # return アンダーラインを追加した文字列
  echo -e "\033[4m${@}\033[0m"
}
alias str.f.u="str.format.underline"

str.format.strikethrough() {
  # 入力内容に取り消し線を引きます
  # param1+ 取り消し線を追加したい文字列
  # return 取り消し線を追加した文字列
  echo -e "\033[9m${@}\033[0m"
}
alias str.f.d="str.format.strikethrough"

str.color.gray() {
  # 入力を灰字にします
  # param1+ 灰字にしたい文字列
  # return 灰字にした文字列
  echo -e "\033[30m${@}\033[0m"
}
alias str.c.gray="str.color.gray"

str.color.red() {
  # 入力を赤字にします
  # param1+ 赤字にしたい文字列
  # return 赤字にした文字列
  echo -e "\033[31m${@}\033[0m"
}
alias str.c.r="str.color.red"

str.color.green() {
  # 入力を緑字にします
  # param1+ 緑字にしたい文字列
  # return 緑字にした文字列
  echo -e "\033[32m${@}\033[0m"
}
alias str.c.g="str.color.green"

str.color.yellow() {
  # 入力を黄字にします
  # param1+ 黄字にしたい文字列
  # return 黄字にした文字列
  echo -e "\033[33m${@}\033[0m"
}
alias str.c.y="str.color.yellow"

str.color.blue() {
  # 入力を青字にします
  # param1+ 青字にしたい文字列
  # return 青字にした文字列
  echo -e "\033[34m${@}\033[0m"
}
alias str.c.b="str.color.blue"

str.color.purple() {
  # 入力を紫字にします
  # param1+ 紫字にしたい文字列
  # return 紫字にした文字列
  echo -e "\033[35m${@}\033[0m"
}
alias str.c.purple="str.color.purple"

str.rect() (
  # 四角形を描画します
  # param1 横幅
  # param2 高さ
  # return 四角形
  local w=${1:-20}
  [[ w -le 1 ]] && {
    str.times "-\n" ${2:-1}
    exit
  }
  local h=${2:-$(( w / 2 + 1))}
  local w2=$(( w -2 ))
  cat <<<$(str.fill $w '-'; [[ ${h} -ge 2 ]] && str.times "|$(str.fill ${w2})|\n" $(( h -2 )); str.fill $w '-')
)
