#!/bin/bash
# =====================================
#              質問関数定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
source "${base}/num"

# ----------------
#     関数定義
# ----------------
qa.yn() {
  # 質問を表示し、Yes or No で回答させます
  # param1 質問文
  # returnCd 0:Yes 1:No
  local yn
  read -p "${1:-Are you sure?}[y/N]: " yn>&2
  case "${yn}" in
    [yY]* )
      return 0;;
    *)
      return 1;;
  esac
}

qa.checkbox() (
  # 指定した選択肢から選択させます
  # paramN+ 選択肢文言
  # opt: n 選択肢ではなく番号を返す
  # opt: o ひとつだけ選択
  # opt: i カンマ区切りで選択済みの番号を入れる(0 始まり. oが指定された場合は後勝ち)
  # return 選択された選択肢文言
  local OPTIND
  local cursor='\e[36m>\e[m'
  local selected='\e[36m*\e[m'
  local selectedChioces=()
  local currentIdx=0
  local asIndex=
  local selectOne=
  local selects=()
  while getopts noi: OPT
  do
    case $OPT in
      n) asIndex='y';;
      o) selectOne='y';;
      i) selectedChioces=( ${OPTARG//,/ } );;
    esac
  done
  shift $((OPTIND - 1))

  local choices=( "$@" )
  local choiceCnt="$#"
  [[ $choiceCnt -eq 0 ]] && return 0

  for s in "${selectedChioces[@]}";do
    [[ -n "${selectOne}" ]] && selects=()
    [[ "$s" -le "$choiceCnt" ]] && selects[s]="${selected}"
  done

  getSelected() {
    local sc=()
    local idx=()
    local ridx=
    local OPTIND
    while getopts i OPT
    do
      case $OPT in
        i) ridx='y';;
      esac
    done
    shift $((OPTIND - 1))
    for i in "${!choices[@]}";do
      # 選択されている選択肢文言を保管
      if [[ -n "${selects[i]}" ]];then
        sc=( "${sc[@]}" "${choices[i]}" )
        idx=( "${idx[@]}" "$i" )
      fi
    done
    if [[ -n "${ridx}" ]];then
      echo -n "${idx[@]}"
    else
      echo -n "${sc[@]}"
    fi
  }

  menu() {
    local view="移動:[↑]or[↓], 選択:[SPACE], 決定:[ENTER]\n"
    for i in "${!choices[@]}";do
      # 選択肢表示
      if [[ $currentIdx -eq $i ]];then
        view+="${cursor} [${selects[i]:- }] "
      else
        view+="  [${selects[i]:- }] "
      fi
      view+="${choices[i]}\n"
    done
    echo -e "${view}\nselected: $(getSelected)"
  }

  clearMenu() {
    tput cuu $(( $choiceCnt + 3 + ${1:-0} )) # 描画した分だけ上にずれる
    tput cub $(tput cols) # 左端にずれる
    tput ed # カーソル以下を初期化
  }

  selectChoices() {
    while true;do
      while menu && IFS= read -r -n1 -s pushedKey && [[ -n "$pushedKey" ]]; do
        if [[ "$pushedKey" == $'\x1b' ]];then
          read -r -n2 -s rest
          pushedKey+="$rest"
        fi
        clearMenu

        case "$pushedKey" in
          #up arrow
          $'\x1b\x5b\x41')
            if [[ "$currentIdx" -ne 0 ]]; then
                currentIdx=$(( currentIdx - 1 ))
            else
                currentIdx=$(( ${#choices[@]}-1 ))
            fi
            ;;
          #down arrow
          $'\x1b\x5b\x42')
            if [[ "$currentIdx" -ne $(( ${#choices[@]} - 1 )) ]]; then
                currentIdx=$(( ${currentIdx} + 1 ))
            else
                currentIdx=0
            fi
            ;;
          #space
          $'\x20')
            if [[ "${selects[currentIdx]}" == "${selected}" ]];then
              selects[currentIdx]=""
            else
              if [[ -n "${selectOne}" ]];then
                selects=()
                selects[currentIdx]="${selected}"
              else
                selects[currentIdx]="${selected}"
              fi
            fi
            ;;
        esac
      done

      local yn
      read -p "Finished your selection?[Y/n]: " yn
      case "${yn}" in
        '' | [yY]* )
          break;;
        *)
          ;;
      esac
      clearMenu 1
    done
  }
  selectChoices >&2
  if [[ -n "${asIndex}" ]];then
    echo "$(getSelected -i)"
  else
    echo "$(getSelected)"
  fi
)

qa.radio() {
  # 指定した選択肢からひとつだけ選択させます
  # paramN+ 選択肢文言
  # opt: n 選択肢ではなく番号を返す
  # opt: i カンマ区切りで選択済みの番号を入れる(0 始まり. 後勝ち)
  # return 選択された選択肢文言
  qa.checkbox -o "$@"
}

qa.password() {
  # 指定した名前の変数に値を設定します
  # ただし、表示の際には * で表示されます
  # param1 変数名
  local variable=${1}
  local invisible=
  [[ -z "${variable}" ]] && {
    echo "variable-name is required!" >&2
    return 1
  }
  echo -n "$variable: "
  while IFS= read -r -n 1 -s key && [[ -n "$key" ]]; do
    if [[ "$key" == $'\x7f' ]];then # backspace
      tput cub 1 # 左にずれる
      tput el # 文字削除
      invisible="${invisible:0:${#invisible}-1}"
    else
      echo -n "*"
      invisible+="$key"
    fi
  done
  read -r -s $variable <<<"$invisible"
  echo;
}
