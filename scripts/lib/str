#!/bin/bash
# =====================================
#            文字列関数定義
# =====================================

# ----------------
#     関数定義
# ----------------
str.indexOf() {
  # 検索対象文字列が入力文字列（もしくはストリーミング）の何文字目にあたるかを返します
  # input-stream 入力ストリーム
  # param1 検索対象文字列
  # param2 入力文字列
  # return 検索対象文字列が何文字目にあたるか
  # returnCd 0:文字列が見つかった 1:文字列が見つからなかった
  local idx
  if [ -t 0 ]; then
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    local line=''
    if [ "$#" -gt 0 ];then
      line="${1}"
    fi
    idx=$(awk 'BEGIN{ print index("'"${line}"'", "'"${target}"'")-1}')
  else
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    idx=$(cat - | awk '{ print index($0, "'"${target}"'")-1}')
  fi
  echo "$idx"
  if [[ "$idx" == "-1" ]];then
    return 1
  fi
}

str.contains() {
  # 検索対象文字列が入力文字列（もしくはストリーミング）に含まれるかを返します
  # input-stream 入力ストリーム
  # param1 検索対象文字列
  # param2 入力文字列
  # returnCd 0:文字列が含まれている 1:文字列が含まれていない
  local index
  if [ -t 0 ]; then
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    local line=''
    if [ "$#" -gt 0 ];then
      line="${1}"
    fi
    index=$(awk 'BEGIN{ print index("'"${line}"'", "'"${target}"'")}')
  else
    local target=''
    if [ "$#" -gt 0 ];then
      target="${1}";shift
    fi
    index=$(cat - | awk '{ print index($0, "'"${target}"'")}')
  fi
  if [[ "$index" == "0" ]];then
    return 1
  else
    return 0
  fi
}

str.match() {
  # パターンが入力文字列にマッチするかを判定し、判定結果を返します
  # param1 パターン
  # param2 入力文字列
  # return マッチした文字列を格納した配列
  # returnCd 0:文字列が含まれている 1:文字列が含まれていない
  if [[ "$#" -ge 2 ]];then
    local regex="$1";shift
    local line="$1"
    if [[ "$line" =~ $regex ]];then
      echo "${BASH_REMATCH[@]}"
      return 0
    fi
  fi
  return 1
}

str.toLower() {
  # 入力文字列を小文字に変換します
  # param1 文字列
  # return 小文字に変換した文字列
  if [ -t 0 ]; then
    if [[ "$#" -gt 0 ]];then
      echo "$1" | awk '{print tolower($0)}'
    fi
  else
    cat - | awk '{print tolower($0)}'
  fi
}

str.toUpper() {
  # 入力文字列を大文字に変換します
  # param1 文字列
  # return 大文字に変換した文字列
  if [ -t 0 ]; then
    if [[ "$#" -gt 0 ]];then
      echo "$1" | awk '{print toupper($0)}'
    fi
  else
    cat - | awk '{print toupper($0)}'
  fi
}

str.isInteger() {
  # 入力文字列が整数かどうかを返します
  # param1 入力文字列
  # returnCd 0:整数 1:整数ではない
  if [[ "$#" -eq 0 ]];then
    return 1
  fi
  local arg="$1"
  expr "${arg}" + 1 >/dev/null 2>&1
  if [ $? -ge 2 ]; then
    return 1
  fi
}

str.isNumber() {
  # 小数の場合も考慮し、入力文字列が数値かどうかを返します
  # param1 入力文字列
  # returnCd 0:数値 1:数値ではない
  if [[ "$#" -eq 0 ]];then
    return 1
  fi
  local arg="$1"
  str.isInteger "${arg/./}"
  return "$?"
}

str.times() {
  # 文字列を指定回数繰り返します
  # param1 文字列
  # param2 指定回数（デフォルト1回）
  # return 指定回数繰り返された文字列
  local str=$1;shift
  local cnt=${1:-1}
  local i
  for (( i=0; i<$cnt; i++ ));do
    echo -n "$str"
  done
}
