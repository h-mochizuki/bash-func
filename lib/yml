#!/bin/bash
# =====================================
#         YAMLファイル変換関数定義
# =====================================

# ----------------
#     関数定義
# ----------------
__yml.stream() {
  # YAMLをインデント/キー/バリューで区切ったストリームを返します
  # input-stream 入力ストリーム
  # param1 入力ファイル
  # return YAMLをインデント/キー/バリューで区切ったストリーム
  local s='[[:space:]]*'
  local c='[[:space:]]\+#.*'
  local w='[a-zA-Z0-9_]*[a-zA-Z0-9_\.-]*'
  local l='[-]'
  local fs=$(echo @|tr @ '\034')
  if [ -t 0 ]; then
    [[ "$#" -ne 0 ]] && cat "$1"
  else
    cat -
  fi | \
  sed -ne "s|^\($s\):|\1|" \
       -e "s|^\($s\)\($l$s$w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($l$s$w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($l\)$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($l\)$s[\"']\(.*\)[\"']$c\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($l\)$s\(.*\)$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($l\)$s\(\([^[:space:]][^#]\)\+\)$c\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s#$s\(.*\)\$|\1$fs\2$fs|p" \
       -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$c\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s\(\([^[:space:]][^#]\)\+\)$c\$|\1$fs\2$fs\3|p" \
       -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"
}

__yml.parse() {
  # インデント/キー/バリューで区切られたストリームを解析し
  # 指定されたフォーマットで出力します
  # input-stream 入力ストリーム
  # param1+ 入力オプション
  # return 解析結果
  # ----
  # オプション
  #   --prefix        : キーにつける接頭語
  #   --illegal-chars : キーに使用できない不正な文字列
  #   --key-separator : キーを分割するセパレータ（不正文字列もこれで置換されます）
  #   --value-prefix  : バリューの接頭語
  #   --value-suffix  : バリューの接尾辞
  #   --index-prefix  : 配列インデックスの接頭語
  #   --index-suffix  : 配列インデックスの接尾辞
  local OPT
  local prefix=''
  local illegal=''
  local separator=''
  local value_prefix=''
  local value_suffix=''
  local index_prefix=''
  local index_suffix=''
  local fs=$(echo @|tr @ '\034')
  for OPT in "$@"; do
    case "$OPT" in
      --prefix) {
        if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
          shift
        else
          prefix="$2"
          shift 2
        fi
      };;
      --illegal-chars) illegal="$2"; shift 2;;
      --key-separator) separator="$2"; shift 2;;
      --value-prefix) value_prefix="$2"; shift 2;;
      --value-suffix) value_suffix="$2"; shift 2;;
      --index-prefix) index_prefix="$2"; shift 2;;
      --index-suffix) index_suffix="$2"; shift 2;;
    esac
  done
  cat - | awk -F${fs} '{
    indent = length($1);
    if ($2 !~ /^[-]/) {
      # type: hash
      offset = 0;
      idx = idxs[indent + offset];
      if (length(idx) == 0) {idx=0}
      for (i in idxs) {if (i > indent + offset) {delete idxs[i]}}
      for (i in vname) {if (i > indent + offset) {delete vname[i]}}

      if (length("'${illegal}'") > 0) {gsub( /'${illegal}'/, "'${separator}'", $2)}
      vname[indent + offset] = $2;
    } else if (length($2) == 1) {
      # type: list
      offset = 1;
      idx = idxs[indent + offset];
      if (length(idx) == 0) {idx=0}
      for (i in idxs) {if (i > indent + offset) {delete idxs[i]}}
      for (i in vname) {if (i > indent + offset) {delete vname[i]}}

      vname[indent + offset] = ("'${fs}'")(idx);
      $2 = ("'${index_prefix}'")(idx)("'${index_suffix}'");
      idxs[indent + offset] = ++idx;
    } else {
      # type: list + hash
      list_offset = 1;
      idx = idxs[indent + list_offset];
      if (length(idx) == 0) {idx=0}
      offset = match(substr($2, 2, length($2) - 1), /[^[:space:]]/);
      for (i in idxs) {if (i > indent + offset) {delete idxs[i]}}
      for (i in vname) {if (i > indent + offset) {delete vname[i]}}

      lstr = substr($2, offset + 1, length($2) - offset)
      if (length("'${illegal}'") > 0) {gsub( /'${illegal}'/, "'${separator}'", lstr)}
      vname[indent + list_offset] = ("'${fs}'")(idx);
      vname[indent + offset] = lstr;
      $2 = ("'${index_prefix}'")(idx)("'${index_suffix}'")("'${separator}'")(lstr);
      idxs[indent + list_offset] = ++idx;
      idxs[indent + offset] = 0;
      offset = 0;
    }
    if (length($3) > 0) {
      vn="";
      for (i=0; i<indent + offset; i++) {
        if (length(vname[i]) > 0) {vn = (vn)(vname[i])("'${separator}'")}
      }
      gsub( /'${separator}${fs}'[0-9]+/, "'${index_prefix}'&'${index_suffix}'", vn );
      gsub( /'${separator}${fs}'/, "", vn );
      if (idx > 0) {vn = substr(vn, 1, length(vn)-1)}
      printf("%s%s%s='$value_prefix'%s'$value_suffix'\n", "'${prefix}'", vn, $2, $3);
    }
  }'
}

yml.toEnv() {
  # YAMLを環境変数方式に変換します
  # 環境変数のキーにドットやハイフンは使用できないため
  # それらが使用されていた場合アンダースコアに変更されます
  # input-stream 入力ストリーム
  # param1 入力ファイル
  # param2 追加接頭語
  # return 環境変数方式のYAML内容
  local prefix="$1"
  [ -t 0 ] && prefix="$2"
  __yml.stream "$@" | \
  __yml.parse \
    --illegal-chars '[\\.-]' \
    --key-separator '_' \
    --value-prefix '\"' \
    --value-suffix '\"' \
    --index-prefix '[' \
    --index-suffix ']' \
    --prefix "${prefix}"
}

yml.toProperties() {
  # YAMLをpropertiesファイル形式に変換します
  # propertyのキーにイコールは使用できないため
  # 使用されていた場合はドットに変更されます
  # input-stream 入力ストリーム
  # param1 入力ファイル
  # param2 追加接頭語
  # return propertiesファイル形式に変換したYAML内容
  local prefix="$1"
  [ -t 0 ] && prefix="$2"
  __yml.stream "$@" | \
  __yml.parse \
    --illegal-chars '[=]' \
    --key-separator '.' \
    --index-prefix '.' \
    --prefix "${prefix}"
}
