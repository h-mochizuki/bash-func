#!/bin/bash
# =====================================
#              評価関数定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
source "${base}/log"
source "${base}/file"

# ----------------
#     関数定義
# ----------------
assert.isRoot() {
  # root権限を持つかを返します
  # param1? ユーザ名
  # returnCd 0:root権限を持つ 1:root権限を持たない
  [ "$(id -u ${1:-$(whoami)})" == "0" ]
}

assert.isWindows() {
  # Windows環境で実行されているかを返します
  # returnCd 0:Windows環境で実行されている 1:Windows以外で実行されている
  case "$(uname -s)" in
    CYGWIN*|MINGW*|MSYS*|Microsoft*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

assert.isWsl() {
  # Windows WSL環境で実行されているかを返します
  # returnCd 0:Windows WSL環境で実行されている 1:Windows WSL環境以外で実行されている
  grep microsoft /proc/version >/dev/null 2>&1
}

assert.installed() {
  # 指定されたコマンドが実行可能かを返します
  # param1 コマンドやファンクション
  # returnCd 0:実行可能 1:実行不可
  [[ "$#" -eq 0 ]] && return 1
  case "$(type -t ${1})" in
    builtin|function)
      return 0
      ;;
    file|alias)
      file.executable $(type -P "${1}")
      ;;
    *)
      return 1
      ;;
  esac
}

assert.exec() {
  # 渡されたコマンドを実行して、エラーだった場合には全体の処理を終了します
  # param1+ 実行コマンド
  # exitCd 1:処理エラー
  if [ "$#" -gt 0 ];then
    local cmd="$1";shift
    local args=( "$@" )
    "$cmd" "${args[@]}" || if [ true ]; then
      log.logger 'ERROR' "!!FAILED!! -exec-> $cmd ${args[@]//\"/}"
      exit 1
    fi
  fi
}

assert.retry() {
  # 渡されたコマンドを実行して、エラーだった場合には指定回数繰返します
  # 最後までエラーの場合は全体の処理を終了します
  # opt: n 繰り返し回数（デフォルト：5 回）
  # opt: w 繰返し間隔（デフォルト：1秒）
  # param1+ 実行コマンド
  # exitCd 1:処理エラー
  local OPTIND
  local count=1
  local max=5
  local waittime=1
  while getopts n:w: OPT
  do
    case $OPT in
      n) max=$OPTARG
      ;;
      w) waittime=$OPTARG
      ;;
    esac
  done
  shift $((OPTIND - 1))
  if [ "$#" -eq 0 ];then
    return 0
  fi
  local cmd="$1";shift
  local args=( "$@" )

  expr "${max}" + 1 >/dev/null 2>&1
  if [[ $? -ge 2 ]];then
    log.logger "Max-retry-count is number only : ${max}" >&2
    return 1
  fi
  expr "${waittime}" + 1 >/dev/null 2>&1
  if [[ $? -ge 2 ]];then
    log.logger "Wait-time is number only : ${waittime}" >&2
    return 1
  fi

  if "$cmd" "${args[@]}";then
    :
  elif [ ${count} -ge ${max} ];then
    log.logger 'ERROR' "!!FAILED:RETRY ${max}!! -exec-> $cmd ${args[@]//\"/}"
    exit 1
  else
    count=$((count + 1))
    while sleep "${waittime}";do
      "$cmd" "${args[@]}" || if [ ${count} -lt ${max} ];then
        count=$((count + 1))
      else
        log.logger 'ERROR' "!!FAILED:RETRY ${max}!! -exec-> $cmd ${args[@]//\"/}"
        exit 1
      fi
    done
  fi
}

__assert.__lock() {
  # ロックファイルを作成します
  # 既にファイルがある場合は、指定時間だけ待機します
  # param1 タイムアウト時間
  # param2 ロックファイル
  # returnCd 0:正常 124:タイムアウトエラー
  local startTime=$(date +'%s')
  local currentTime
  local timeout="${1:?'timeout is reuqired.'}";shift
  local lockfile="${1:?'lockfile is reuqired.'}";shift
  expr "${timeout}" + 1 >/dev/null 2>&1
  if [[ $? -ge 2 ]];then
    log.logger "Timeout is number only : ${timeout}" >&2
    return 1
  fi

  while true;do
    ( : > "${lockfile}" ) 2>/dev/null
    local re=$?
    ( [[ -f "${lockfile}" ]] && chmod 0000 "${lockfile}" ) 2>/dev/null
    if [[ "${re}" -eq 0 ]];then
      return 0
    fi
    currentTime=$(date +'%s')
    if [[ $((currentTime - startTime)) -gt ${timeout} ]];then
      log.logger 'ERROR' "lock timeout : {}s" "${timeout}"
      return 124
    fi
  done
}

assert.unlock() {
  # ロックファイルを削除します
  # param1 ロックファイル
  local exitCd=$?
  trap - EXIT HUP INT QUIT TERM
  rm -f "${1:?'lockfile is required.'}"
  exit "${exitCd}"
}

assert.lock() {
  # ロックファイルを作成します
  # 既にファイルがある場合は、指定時間だけ待機します
  # opt: w タイムアウト秒数（デフォルト：10秒）
  # param1 ロックファイル（デフォルト：呼び出し元Bashソースファイル）
  # returnCd 0:正常 1: タイムアウト秒数指定エラー 124:タイムアウトエラー
  # ----
  # サブシェルから抜けることで自動ロック解除を行います。
  # ロックファイルは用途に応じて指定します。
  # (
  #   assert.lock 'lockme.lock'
  #   # 何かの処理
  # )
  local OPTIND
  local timeout
  local lockfile
  while getopts w: OPT
  do
    case $OPT in
      w) timeout=$OPTARG
      ;;
    esac
  done
  shift $((OPTIND - 1))

  lockfile="${1:-$(basename ${BASH_SOURCE[1]:-main}).lock}"

  __assert.__lock "${timeout:-10}" "${lockfile}" || exit
  trap "assert.unlock '${lockfile}'" EXIT HUP INT QUIT TERM
}

assert.yn() {
  # 質問を表示し、Yes or No で回答させます
  # param1 質問文
  # returnCd 0:Yes 1:No
  local yn
  read -p "${1:-Are you sure?}[y/N]: " yn>&2
  case "${yn}" in
    [yY]* )
      return 0;;
    *)
      return 1;;
  esac
}

assert.choice() (
  # 指定した選択肢から選択させます
  # paramN+ 選択肢文言
  # opt: i 選択肢ではなくインデックスを返す
  # opt: o ひとつだけ選択
  # return 選択された選択肢文言
  local OPTIND
  local cursor='\e[36m>\e[m'
  local selected='\e[36m*\e[m'
  local currentIdx=0
  local asIndex=
  local selectOne=
  while getopts io OPT
  do
    case $OPT in
      i) asIndex='y';;
      o) selectOne='y';;
    esac
  done
  shift $((OPTIND - 1))

  local choices=( "$@" )
  local choiceCnt="$#"
  local selects=()

  [[ $choiceCnt -eq 0 ]] && return 0

  getSelected() {
    local sc=()
    local idx=()
    local ridx=
    local OPTIND
    while getopts i OPT
    do
      case $OPT in
        i) ridx='y';;
      esac
    done
    shift $((OPTIND - 1))
    for i in "${!choices[@]}";do
      # 選択されている選択肢文言を保管
      if [[ -n "${selects[i]}" ]];then
        sc=( "${sc[@]}" "${choices[i]}" )
        idx=( "${idx[@]}" "$i" )
      fi
    done
    if [[ -n "${ridx}" ]];then
      echo -n "${idx[@]}"
    else
      echo -n "${sc[@]}"
    fi
  }

  menu() {
    echo "移動:[↑]or[↓], 選択:[SPACE], 決定:[ENTER]"
    for i in "${!choices[@]}";do
      # 選択肢表示
      if [[ $currentIdx -eq $i ]];then
        echo -n -e "${cursor} [${selects[i]:- }] "
      else
        echo -n -e "  [${selects[i]:- }] "
      fi
      echo "${choices[i]}"
    done
    echo;
    echo "selected: $(getSelected)"
  }

  clearMenu() {
    tput cuu $(( $choiceCnt + 3 + ${1:-0} ))
    tput cub $(tput cols)
    tput ed
  }

  selectChoices() {
    while true;do
      while menu && IFS= read -r -n1 -s pushedKey && [[ -n "$pushedKey" ]]; do
        if [[ "$pushedKey" == $'\x1b' ]];then
          read -r -n2 -s rest
          pushedKey+="$rest"
        fi
        clearMenu

        case "$pushedKey" in
          $'\x1b\x5b\x41') #up arrow
            if [[ "$currentIdx" -ne 0 ]]; then
                currentIdx=$(( currentIdx - 1 ))
            else
                currentIdx=$(( ${#choices[@]}-1 ))
            fi
            ;;
          $'\x1b\x5b\x42') #down arrow
            if [[ "$currentIdx" -ne $(( ${#choices[@]} - 1 )) ]]; then
                currentIdx=$(( ${currentIdx} + 1 ))
            else
                currentIdx=0
            fi
            ;;
          $'\x20') #space
            if [[ "${selects[currentIdx]}" == "${selected}" ]];then
              selects[currentIdx]=""
            else
              if [[ -n "${selectOne}" ]];then
                selects=()
                selects[currentIdx]="${selected}"
              else
                selects[currentIdx]="${selected}"
              fi
            fi
            ;;
        esac
      done

      local yn
      read -p "Finished your selection?[Y/n]: " yn
      case "${yn}" in
        '' | [yY]* )
          break;;
        *)
          ;;
      esac
      clearMenu 1
    done
  }
  selectChoices >&2
  if [[ -n "${asIndex}" ]];then
    echo "$(getSelected -i)"
  else
    echo "$(getSelected)"
  fi
)

assert.select() {
  # 指定した選択肢からひとつだけ選択させます
  # paramN+ 選択肢文言
  # opt: i 選択肢ではなくインデックスを返す
  # return 選択された選択肢文言
  assert.choice -o "$@"
}

assert.password() {
  # 指定した名前の変数に値を設定します
  # ただし、表示の際には * で表示されます
  # param1 変数名
  local variable=${1}
  local invisible=
  [[ -z "${variable}" ]] && {
    echo "variable-name is required!" >&2
    return 1
  }
  echo -n "$variable: "
  while IFS= read -r -n 1 -s key && [[ -n "$key" ]]; do
    if [[ "$key" == $'\x7f' ]];then # backspace
      tput cub 1
      tput el
      invisible="${invisible:0:${#invisible}-1}"
    else
      echo -n "*"
      invisible+="$key"
    fi
  done
  read -r -s $variable <<<"$invisible"
  echo;
}
