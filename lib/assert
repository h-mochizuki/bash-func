#!/bin/bash
# =====================================
#              評価関数定義
# =====================================
base="$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)"
source "${base}/log"

# ----------------
#     関数定義
# ----------------
assert.isRoot() {
  # root権限を持つかを返します
  # param1? ユーザ名
  # returnCd 0:root権限を持つ 1:root権限を持たない
  [ "$(id -u ${1:-$(whoami)})" == "0" ]
}

assert.isWindows() {
  # Windows環境で実行されているかを返します
  # returnCd 0:Windows環境で実行されている 1:Windows以外で実行されている
  case "$(uname -s)" in
    CYGWIN*|MINGW*|MSYS*|Microsoft*)
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

assert.installed() {
  # 指定されたコマンドが実行可能かを返します
  # param1 コマンドやファンクション
  # returnCd 0:実行可能 1:実行不可
  [[ "$#" -eq 0 ]] && return 1
  local target="$1"
  local targetType="$(type -t ${target})"
  if [[ "${targetType}" == "builtin" ]] || [[ "${targetType}" == "function" ]];then
    return 0
  elif [[ "${targetType}" == "file" ]] && $(assert.executable "$(type -P ${target})");then
    return 0
  elif [[ "${targetType}" == "alias" ]] && $(assert.executable "$(type -P ${target})");then
    return 0
  else
    return 1
  fi
}

assert.executable() {
  # 指定されたファイルが実行可能かを返します
  # param1 ファイルパス
  # returnCd 0:実行可能 1:実行不可
  [[ "$#" -eq 0 ]] && return 1
  [[ ! -z "${1+x}" ]] && [[ -x "${1}" ]]
}

assert.writable() {
  # 指定されたファイルが書込可能かを返します
  # param1 ファイルパス
  # returnCd 0:書込可能 1:書込不可
  [[ "$#" -eq 0 ]] && return 1
  [[ ! -z "${1+x}" ]] && [[ -w "${1}" ]]
}

assert.readable() {
  # 指定されたファイルが読込可能かを返します
  # param1 ファイルパス
  # returnCd 0:読込可能 1:読込不可
  [[ "$#" -eq 0 ]] && return 1
  [[ ! -z "${1+x}" ]] && [[ -r "${1}" ]]
}

assert.exec() {
  # 渡されたコマンドを実行して、エラーだった場合には全体の処理を終了します
  # param1+ 実行コマンド
  # exitCd 1:処理エラー
  if [ "$#" -gt 0 ];then
    local cmd="$1";shift
    local args=( "$@" )
    "$cmd" "${args[@]}" || if [ true ]; then
      log.logger 'ERROR' "!!FAILED!! -exec-> $cmd ${args[@]//\"/}"
      exit 1
    fi
  fi
}
